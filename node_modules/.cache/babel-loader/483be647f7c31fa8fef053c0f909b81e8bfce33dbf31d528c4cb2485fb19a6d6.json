{"ast":null,"code":"import { api } from \"../../config/api\";\nimport { FIND_POST_BY_ID_FAILURE, FIND_POST_BY_ID_SUCCESS, GET_ALL_POSTS_FAILURE, GET_ALL_POSTS_SUCCESS, GET_USER_POSTS_FAILURE, GET_USER_POSTS_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_SUCCESS, POST_CREATE_FAILURE, POST_CREATE_SUCCESS, POST_DELETE_FAILURE, POST_DELETE_SUCCESS, REPLY_POST_FAILURE, REPLY_POST_SUCCESS, RPOST_FAILURE, RPOST_SUCCESS, USER_LIKE_POST_FAILURE, USER_LIKE_POST_SUCCESS } from \"./ActionType\";\nexport const getAllPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.get(\"/api/posts/\");\n    dispatch({\n      type: GET_ALL_POSTS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_ALL_POSTS_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const getUsersPost = userId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/posts/user/${userId}`);\n    dispatch({\n      type: GET_USER_POSTS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_USER_POSTS_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const findPostsByLikeContainUser = userId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/posts/user/${userId}/likes`);\n    dispatch({\n      type: USER_LIKE_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: USER_LIKE_POST_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const findPostsById = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/posts/${postId}`);\n    dispatch({\n      type: FIND_POST_BY_ID_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FIND_POST_BY_ID_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createPost = postData => async dispatch => {\n  try {\n    const formData = new FormData();\n    formData.append(\"file\", postData.file);\n    formData.append(\"content\", postData.content);\n    const {\n      data\n    } = await api.post(`/api/posts/create`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n        \"Authorization\": `Bearer ${localStorage.getItem(\"jwt\")}`\n      }\n    });\n    console.log(\"Create Post:\", data);\n    dispatch({\n      type: POST_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: POST_CREATE_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createPostReply = postData => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.post(`/api/posts/reply`, postData);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: REPLY_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: REPLY_POST_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createRePost = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.put(`/api/posts/${postId}/repost`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: RPOST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: RPOST_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const likePost = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.post(`/api/${postId}/likes`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: LIKE_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: LIKE_POST_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const deletePost = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.delete(`/api/posts/${postId}`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: POST_DELETE_SUCCESS,\n      payload: postId\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: POST_DELETE_FAILURE,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["api","FIND_POST_BY_ID_FAILURE","FIND_POST_BY_ID_SUCCESS","GET_ALL_POSTS_FAILURE","GET_ALL_POSTS_SUCCESS","GET_USER_POSTS_FAILURE","GET_USER_POSTS_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_SUCCESS","POST_CREATE_FAILURE","POST_CREATE_SUCCESS","POST_DELETE_FAILURE","POST_DELETE_SUCCESS","REPLY_POST_FAILURE","REPLY_POST_SUCCESS","RPOST_FAILURE","RPOST_SUCCESS","USER_LIKE_POST_FAILURE","USER_LIKE_POST_SUCCESS","getAllPosts","dispatch","data","get","type","payload","error","console","log","message","getUsersPost","userId","findPostsByLikeContainUser","findPostsById","postId","createPost","postData","formData","FormData","append","file","content","post","headers","localStorage","getItem","createPostReply","createRePost","put","likePost","deletePost","delete"],"sources":["D:/WEB/social/social-react/src/Store/Post/Action.js"],"sourcesContent":["import { api } from \"../../config/api\";\r\nimport { FIND_POST_BY_ID_FAILURE, FIND_POST_BY_ID_SUCCESS, GET_ALL_POSTS_FAILURE, GET_ALL_POSTS_SUCCESS, GET_USER_POSTS_FAILURE, GET_USER_POSTS_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_SUCCESS, POST_CREATE_FAILURE, POST_CREATE_SUCCESS, POST_DELETE_FAILURE, POST_DELETE_SUCCESS, REPLY_POST_FAILURE, REPLY_POST_SUCCESS, RPOST_FAILURE, RPOST_SUCCESS, USER_LIKE_POST_FAILURE, USER_LIKE_POST_SUCCESS } from \"./ActionType\";\r\n\r\nexport const getAllPosts = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.get(\"/api/posts/\");\r\n        dispatch({ type: GET_ALL_POSTS_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: GET_ALL_POSTS_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const getUsersPost = (userId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.get(`/api/posts/user/${userId}`);\r\n        dispatch({ type: GET_USER_POSTS_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: GET_USER_POSTS_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const findPostsByLikeContainUser = (userId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.get(`/api/posts/user/${userId}/likes`);\r\n        dispatch({ type: USER_LIKE_POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: USER_LIKE_POST_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const findPostsById = (postId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.get(`/api/posts/${postId}`);\r\n        dispatch({ type: FIND_POST_BY_ID_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: FIND_POST_BY_ID_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const createPost = (postData) => async (dispatch) => {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", postData.file);\r\n        formData.append(\"content\", postData.content);\r\n\r\n        const { data } = await api.post(`/api/posts/create`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\",\r\n                \"Authorization\": `Bearer ${localStorage.getItem(\"jwt\")}`,\r\n            },\r\n        });\r\n\r\n        console.log(\"Create Post:\", data);\r\n        dispatch({ type: POST_CREATE_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: POST_CREATE_FAILURE, payload: error.message });\r\n    }\r\n};\r\n\r\n\r\nexport const createPostReply = (postData) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.post(`/api/posts/reply`, postData);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: REPLY_POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: REPLY_POST_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const createRePost = (postId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.put(`/api/posts/${postId}/repost`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: RPOST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: RPOST_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const likePost = (postId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.post(`/api/${postId}/likes`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: LIKE_POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: LIKE_POST_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const deletePost = (postId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.delete(`/api/posts/${postId}`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: POST_DELETE_SUCCESS, payload: postId });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: POST_DELETE_FAILURE, payload: error.message });\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,uBAAuB,EAAEC,uBAAuB,EAAEC,qBAAqB,EAAEC,qBAAqB,EAAEC,sBAAsB,EAAEC,sBAAsB,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAEC,kBAAkB,EAAEC,kBAAkB,EAAEC,aAAa,EAAEC,aAAa,EAAEC,sBAAsB,EAAEC,sBAAsB,QAAQ,cAAc;AAE7Z,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACjD,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAACsB,GAAG,CAAC,aAAa,CAAC;IAC7CF,QAAQ,CAAC;MAAEG,IAAI,EAAEnB,qBAAqB;MAAEoB,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAEpB,qBAAqB;MAAEqB,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EACrE;AACJ,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,MAAM,IAAK,MAAOV,QAAQ,IAAK;EACxD,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAACsB,GAAG,CAAC,mBAAmBQ,MAAM,EAAE,CAAC;IAC3DV,QAAQ,CAAC;MAAEG,IAAI,EAAEjB,sBAAsB;MAAEkB,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAElB,sBAAsB;MAAEmB,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EACtE;AACJ,CAAC;AAED,OAAO,MAAMG,0BAA0B,GAAID,MAAM,IAAK,MAAOV,QAAQ,IAAK;EACtE,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAACsB,GAAG,CAAC,mBAAmBQ,MAAM,QAAQ,CAAC;IACjEV,QAAQ,CAAC;MAAEG,IAAI,EAAEL,sBAAsB;MAAEM,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAEN,sBAAsB;MAAEO,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EACtE;AACJ,CAAC;AAED,OAAO,MAAMI,aAAa,GAAIC,MAAM,IAAK,MAAOb,QAAQ,IAAK;EACzD,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAACsB,GAAG,CAAC,cAAcW,MAAM,EAAE,CAAC;IACtDb,QAAQ,CAAC;MAAEG,IAAI,EAAErB,uBAAuB;MAAEsB,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC9D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAEtB,uBAAuB;MAAEuB,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EACvE;AACJ,CAAC;AAED,OAAO,MAAMM,UAAU,GAAIC,QAAQ,IAAK,MAAOf,QAAQ,IAAK;EACxD,IAAI;IACA,MAAMgB,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACtCH,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEH,QAAQ,CAACK,OAAO,CAAC;IAE5C,MAAM;MAAEnB;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAACyC,IAAI,CAAC,mBAAmB,EAAEL,QAAQ,EAAE;MAC3DM,OAAO,EAAE;QACL,cAAc,EAAE,qBAAqB;QACrC,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;MAC1D;IACJ,CAAC,CAAC;IAEFlB,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,IAAI,CAAC;IACjCD,QAAQ,CAAC;MAAEG,IAAI,EAAEb,mBAAmB;MAAEc,OAAO,EAAEH;IAAK,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAEd,mBAAmB;MAAEe,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EACnE;AACJ,CAAC;AAGD,OAAO,MAAMiB,eAAe,GAAIV,QAAQ,IAAK,MAAOf,QAAQ,IAAK;EAC7D,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAACyC,IAAI,CAAC,kBAAkB,EAAEN,QAAQ,CAAC;IAC7DT,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,IAAI,CAAC;IAClCD,QAAQ,CAAC;MAAEG,IAAI,EAAET,kBAAkB;MAAEU,OAAO,EAAEH;IAAK,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAEV,kBAAkB;MAAEW,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EAClE;AACJ,CAAC;AAED,OAAO,MAAMkB,YAAY,GAAIb,MAAM,IAAK,MAAOb,QAAQ,IAAK;EACxD,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAAC+C,GAAG,CAAC,cAAcd,MAAM,SAAS,CAAC;IAC7DP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,IAAI,CAAC;IAClCD,QAAQ,CAAC;MAAEG,IAAI,EAAEP,aAAa;MAAEQ,OAAO,EAAEH;IAAK,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAER,aAAa;MAAES,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EAC7D;AACJ,CAAC;AAED,OAAO,MAAMoB,QAAQ,GAAIf,MAAM,IAAK,MAAOb,QAAQ,IAAK;EACpD,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAACyC,IAAI,CAAC,QAAQR,MAAM,QAAQ,CAAC;IACvDP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,IAAI,CAAC;IAClCD,QAAQ,CAAC;MAAEG,IAAI,EAAEf,iBAAiB;MAAEgB,OAAO,EAAEH;IAAK,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAEhB,iBAAiB;MAAEiB,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EACjE;AACJ,CAAC;AAED,OAAO,MAAMqB,UAAU,GAAIhB,MAAM,IAAK,MAAOb,QAAQ,IAAK;EACtD,IAAI;IACA,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMrB,GAAG,CAACkD,MAAM,CAAC,cAAcjB,MAAM,EAAE,CAAC;IACzDP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,IAAI,CAAC;IAClCD,QAAQ,CAAC;MAAEG,IAAI,EAAEX,mBAAmB;MAAEY,OAAO,EAAES;IAAO,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClBL,QAAQ,CAAC;MAAEG,IAAI,EAAEZ,mBAAmB;MAAEa,OAAO,EAAEC,KAAK,CAACG;IAAQ,CAAC,CAAC;EACnE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}