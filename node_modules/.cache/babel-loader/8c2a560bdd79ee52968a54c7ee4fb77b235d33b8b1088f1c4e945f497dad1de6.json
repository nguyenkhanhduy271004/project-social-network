{"ast":null,"code":"import { ADD_COMMENT_POST_FAILURE, ADD_COMMENT_POST_REQUEST, ADD_COMMENT_POST_SUCCESS, FIND_POST_BY_ID_FAILURE, FIND_POST_BY_ID_REQUEST, FIND_POST_BY_ID_SUCCESS, GET_ALL_POSTS_SUCCESS, GET_COMMENT_POST_FAILURE, GET_COMMENT_POST_REQUEST, GET_COMMENT_POST_SUCCESS, GET_REPOST_FAILURE, GET_REPOST_REQUEST, GET_USER_POSTS_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, POST_CREATE_FAILURE, POST_CREATE_REQUEST, POST_CREATE_SUCCESS, POST_DELETE_FAILURE, POST_DELETE_REQUEST, POST_DELETE_SUCCESS, POST_EDIT_FAILURE, POST_EDIT_REQUEST, POST_EDIT_SUCCESS, RPOST_FAILURE, RPOST_REQUEST, RPOST_SUCCESS, USER_LIKE_POST_FAILURE, USER_LIKE_POST_REQUEST, USER_LIKE_POST_SUCCESS } from \"./ActionType\";\nconst initialState = {\n  loading: false,\n  data: null,\n  error: null,\n  posts: [],\n  post: null,\n  likedPosts: [],\n  commentPost: {}\n};\nexport const postReducer = (state = initialState, action) => {\n  var _state$commentPost$ac;\n  switch (action.type) {\n    case POST_CREATE_REQUEST:\n    case POST_DELETE_REQUEST:\n    case USER_LIKE_POST_REQUEST:\n    case LIKE_POST_REQUEST:\n    case RPOST_REQUEST:\n    case FIND_POST_BY_ID_REQUEST:\n    case POST_EDIT_REQUEST:\n    case ADD_COMMENT_POST_REQUEST:\n    case GET_COMMENT_POST_REQUEST:\n    case GET_REPOST_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case POST_CREATE_FAILURE:\n    case POST_DELETE_FAILURE:\n    case USER_LIKE_POST_FAILURE:\n    case LIKE_POST_FAILURE:\n    case RPOST_FAILURE:\n    case FIND_POST_BY_ID_FAILURE:\n    case POST_EDIT_FAILURE:\n    case ADD_COMMENT_POST_FAILURE:\n    case GET_COMMENT_POST_FAILURE:\n    case GET_REPOST_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    case POST_CREATE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        posts: [action.payload, ...state.posts]\n      };\n    case GET_ALL_POSTS_SUCCESS:\n    case GET_USER_POSTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        posts: action.payload\n      };\n    case USER_LIKE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        likedPosts: action.payload\n      };\n    case LIKE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        like: action.payload\n      };\n    case POST_DELETE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        post: state.posts.filter(post => post.id !== action.payload)\n      };\n    case RPOST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        repost: action.payload\n      };\n    case FIND_POST_BY_ID_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        post: action.payload\n      };\n    case POST_EDIT_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        editPost: action.payload\n      };\n    case ADD_COMMENT_POST_SUCCESS:\n      return {\n        ...state,\n        commentPost: {\n          ...state.commentPost,\n          [action.payload.postId]: [...((_state$commentPost$ac = state.commentPost[action.payload.postId]) !== null && _state$commentPost$ac !== void 0 ? _state$commentPost$ac : []), action.payload.comment]\n        }\n      };\n    case GET_COMMENT_POST_SUCCESS:\n      return {\n        ...state,\n        commentPost: {\n          ...state.commentPost,\n          [action.payload.postId]: action.payload.comments\n        }\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ADD_COMMENT_POST_FAILURE","ADD_COMMENT_POST_REQUEST","ADD_COMMENT_POST_SUCCESS","FIND_POST_BY_ID_FAILURE","FIND_POST_BY_ID_REQUEST","FIND_POST_BY_ID_SUCCESS","GET_ALL_POSTS_SUCCESS","GET_COMMENT_POST_FAILURE","GET_COMMENT_POST_REQUEST","GET_COMMENT_POST_SUCCESS","GET_REPOST_FAILURE","GET_REPOST_REQUEST","GET_USER_POSTS_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","POST_CREATE_FAILURE","POST_CREATE_REQUEST","POST_CREATE_SUCCESS","POST_DELETE_FAILURE","POST_DELETE_REQUEST","POST_DELETE_SUCCESS","POST_EDIT_FAILURE","POST_EDIT_REQUEST","POST_EDIT_SUCCESS","RPOST_FAILURE","RPOST_REQUEST","RPOST_SUCCESS","USER_LIKE_POST_FAILURE","USER_LIKE_POST_REQUEST","USER_LIKE_POST_SUCCESS","initialState","loading","data","error","posts","post","likedPosts","commentPost","postReducer","state","action","_state$commentPost$ac","type","payload","like","filter","id","repost","editPost","postId","comment","comments"],"sources":["D:/WEB/social/social-react/src/Store/Post/Reducer.js"],"sourcesContent":["import { ADD_COMMENT_POST_FAILURE, ADD_COMMENT_POST_REQUEST, ADD_COMMENT_POST_SUCCESS, FIND_POST_BY_ID_FAILURE, FIND_POST_BY_ID_REQUEST, FIND_POST_BY_ID_SUCCESS, GET_ALL_POSTS_SUCCESS, GET_COMMENT_POST_FAILURE, GET_COMMENT_POST_REQUEST, GET_COMMENT_POST_SUCCESS, GET_REPOST_FAILURE, GET_REPOST_REQUEST, GET_USER_POSTS_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, POST_CREATE_FAILURE, POST_CREATE_REQUEST, POST_CREATE_SUCCESS, POST_DELETE_FAILURE, POST_DELETE_REQUEST, POST_DELETE_SUCCESS, POST_EDIT_FAILURE, POST_EDIT_REQUEST, POST_EDIT_SUCCESS, RPOST_FAILURE, RPOST_REQUEST, RPOST_SUCCESS, USER_LIKE_POST_FAILURE, USER_LIKE_POST_REQUEST, USER_LIKE_POST_SUCCESS } from \"./ActionType\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    data: null,\r\n    error: null,\r\n    posts: [],\r\n    post: null,\r\n    likedPosts: [],\r\n    commentPost: {}\r\n}\r\nexport const postReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case POST_CREATE_REQUEST:\r\n        case POST_DELETE_REQUEST:\r\n        case USER_LIKE_POST_REQUEST:\r\n        case LIKE_POST_REQUEST:\r\n        case RPOST_REQUEST:\r\n        case FIND_POST_BY_ID_REQUEST:\r\n        case POST_EDIT_REQUEST:\r\n        case ADD_COMMENT_POST_REQUEST:\r\n        case GET_COMMENT_POST_REQUEST:\r\n        case GET_REPOST_REQUEST:\r\n            return { ...state, loading: true, error: null }\r\n        case POST_CREATE_FAILURE:\r\n        case POST_DELETE_FAILURE:\r\n        case USER_LIKE_POST_FAILURE:\r\n        case LIKE_POST_FAILURE:\r\n        case RPOST_FAILURE:\r\n        case FIND_POST_BY_ID_FAILURE:\r\n        case POST_EDIT_FAILURE:\r\n        case ADD_COMMENT_POST_FAILURE:\r\n        case GET_COMMENT_POST_FAILURE:\r\n        case GET_REPOST_FAILURE:\r\n            return { ...state, loading: false, error: action.payload }\r\n        case POST_CREATE_SUCCESS:\r\n            return { ...state, loading: false, error: null, posts: [action.payload, ...state.posts] }\r\n        case GET_ALL_POSTS_SUCCESS:\r\n        case GET_USER_POSTS_SUCCESS:\r\n            return { ...state, loading: false, error: null, posts: action.payload }\r\n        case USER_LIKE_POST_SUCCESS:\r\n            return { ...state, loading: false, error: null, likedPosts: action.payload }\r\n        case LIKE_POST_SUCCESS:\r\n            return { ...state, loading: false, error: null, like: action.payload }\r\n        case POST_DELETE_SUCCESS:\r\n            return { ...state, loading: false, error: null, post: state.posts.filter((post) => post.id !== action.payload) }\r\n        case RPOST_SUCCESS:\r\n            return { ...state, loading: false, error: null, repost: action.payload }\r\n        case FIND_POST_BY_ID_SUCCESS:\r\n            return { ...state, loading: false, error: null, post: action.payload }\r\n        case POST_EDIT_SUCCESS:\r\n            return { ...state, loading: false, error: null, editPost: action.payload }\r\n        case ADD_COMMENT_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                commentPost: {\r\n                    ...state.commentPost,\r\n                    [action.payload.postId]: [\r\n                        ...(state.commentPost[action.payload.postId] ?? []),\r\n                        action.payload.comment\r\n                    ]\r\n                }\r\n            };\r\n\r\n        case GET_COMMENT_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                commentPost: {\r\n                    ...state.commentPost,\r\n                    [action.payload.postId]: action.payload.comments\r\n                }\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}