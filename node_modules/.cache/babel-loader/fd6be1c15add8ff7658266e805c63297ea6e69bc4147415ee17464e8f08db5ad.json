{"ast":null,"code":"import axios from \"axios\";\nimport { FIND_POST_BY_ID_FAILURE, FIND_POST_BY_ID_SUCCESS, GET_ALL_POSTS_FAILURE, GET_ALL_POSTS_SUCCESS, GET_USER_POSTS_FAILURE, GET_USER_POSTS_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_SUCCESS, POST_CREATE_FAILURE, POST_CREATE_SUCCESS, POST_DELETE_FAILURE, POST_DELETE_SUCCESS, REPLY_POST_FAILURE, REPLY_POST_SUCCESS, RPOST_FAILURE, RPOST_SUCCESS, USER_LIKE_POST_FAILURE, USER_LIKE_POST_SUCCESS } from \"./ActionType\";\nconst API_BASE_URL = \"http://localhost:8080\";\nconst api = axios.create({\n  baseUrl: API_BASE_URL,\n  headers: {\n    \"Authorization\": `Bearer ${localStorage.getItem(\"jwt\")}`,\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport const getAllPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.get(\"/api/posts/\");\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: GET_ALL_POSTS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_ALL_POSTS_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const getUsersPost = userId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/posts/user/${userId}`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: GET_USER_POSTS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_USER_POSTS_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const findPostsByLikeContainUser = userId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/posts/user/${userId}/likes`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: USER_LIKE_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: USER_LIKE_POST_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const findPostsById = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.get(`/api/posts/${postId}`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: FIND_POST_BY_ID_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FIND_POST_BY_ID_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createPost = postData => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.post(`/api/posts/create`, postData);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: POST_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: POST_CREATE_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createPostReply = postData => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.post(`/api/posts/reply`, postData);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: REPLY_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: REPLY_POST_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const createRePost = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.post(`/api/posts/${postId}/repost`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: RPOST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: RPOST_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const likePost = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.post(`/api/${postId}/like`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: LIKE_POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: LIKE_POST_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const deletePost = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.post(`/api/post/${postId}`);\n    console.log(\"Get all posts\", data);\n    dispatch({\n      type: POST_DELETE_SUCCESS,\n      payload: postId\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: POST_DELETE_FAILURE,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","FIND_POST_BY_ID_FAILURE","FIND_POST_BY_ID_SUCCESS","GET_ALL_POSTS_FAILURE","GET_ALL_POSTS_SUCCESS","GET_USER_POSTS_FAILURE","GET_USER_POSTS_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_SUCCESS","POST_CREATE_FAILURE","POST_CREATE_SUCCESS","POST_DELETE_FAILURE","POST_DELETE_SUCCESS","REPLY_POST_FAILURE","REPLY_POST_SUCCESS","RPOST_FAILURE","RPOST_SUCCESS","USER_LIKE_POST_FAILURE","USER_LIKE_POST_SUCCESS","API_BASE_URL","api","create","baseUrl","headers","localStorage","getItem","getAllPosts","dispatch","data","get","console","log","type","payload","error","message","getUsersPost","userId","findPostsByLikeContainUser","findPostsById","postId","createPost","postData","post","createPostReply","createRePost","likePost","deletePost"],"sources":["D:/WEB/social/social-react/src/Store/Post/Action.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { FIND_POST_BY_ID_FAILURE, FIND_POST_BY_ID_SUCCESS, GET_ALL_POSTS_FAILURE, GET_ALL_POSTS_SUCCESS, GET_USER_POSTS_FAILURE, GET_USER_POSTS_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_SUCCESS, POST_CREATE_FAILURE, POST_CREATE_SUCCESS, POST_DELETE_FAILURE, POST_DELETE_SUCCESS, REPLY_POST_FAILURE, REPLY_POST_SUCCESS, RPOST_FAILURE, RPOST_SUCCESS, USER_LIKE_POST_FAILURE, USER_LIKE_POST_SUCCESS } from \"./ActionType\";\r\n\r\nconst API_BASE_URL = \"http://localhost:8080\";\r\n\r\nconst api = axios.create({\r\n    baseUrl: API_BASE_URL,\r\n    headers: {\r\n        \"Authorization\": `Bearer ${localStorage.getItem(\"jwt\")}`,\r\n        \"Content-Type\": \"application/json\"\r\n    }\r\n})\r\n\r\nexport const getAllPosts = () => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.get(\"/api/posts/\");\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: GET_ALL_POSTS_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: GET_ALL_POSTS_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const getUsersPost = (userId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.get(`/api/posts/user/${userId}`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: GET_USER_POSTS_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: GET_USER_POSTS_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const findPostsByLikeContainUser = (userId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.get(`/api/posts/user/${userId}/likes`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: USER_LIKE_POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: USER_LIKE_POST_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const findPostsById = (postId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.get(`/api/posts/${postId}`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: FIND_POST_BY_ID_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: FIND_POST_BY_ID_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const createPost = (postData) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.post(`/api/posts/create`, postData);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: POST_CREATE_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: POST_CREATE_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\n\r\nexport const createPostReply = (postData) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.post(`/api/posts/reply`, postData);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: REPLY_POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: REPLY_POST_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const createRePost = (postId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.post(`/api/posts/${postId}/repost`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: RPOST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: RPOST_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const likePost = (postId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.post(`/api/${postId}/like`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: LIKE_POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: LIKE_POST_FAILURE, payload: error.message });\r\n    }\r\n}\r\n\r\nexport const deletePost = (postId) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.post(`/api/post/${postId}`);\r\n        console.log(\"Get all posts\", data);\r\n        dispatch({ type: POST_DELETE_SUCCESS, payload: postId });\r\n    } catch (error) {\r\n        console.log(error);\r\n        dispatch({ type: POST_DELETE_FAILURE, payload: error.message });\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}